# class ReactionDiffusionFI(EquationSet):
#     def __init__(
#         self,
#         c: NDArray[np.float64],
#         D: float,
#         spatial_order: int,
#         grid: Union[UniformNonPeriodicGrid, UniformPeriodicGrid],
#     ):
#         self.X = StateVector([c])
#         d2 = DifferenceUniformGrid(2, spatial_order, grid)
#         self.N = len(c)
#         I = sparse.eye(self.N)  # noqa: E741

#         self.M = I
#         self.L = -D * d2.matrix

#         def F(X: StateVector) -> NDArray[np.float64]:
#             return X.data * (1 - X.data)

#         self.F = F

#         def J(X: StateVector) -> NDArray[np.float64]:
#             c_matrix = sparse.diags(X.data)
#             return cast(NDArray[np.float64], sparse.eye(self.N) - 2 * c_matrix)

#         self.J = J


# class BurgersFI(EquationSet):
#     def __init__(
#         self,
#         u: NDArray[np.float64],
#         nu: Union[float, NDArray[np.float64]],
#         spatial_order: int,
#         grid: Union[UniformPeriodicGrid, NonUniformPeriodicGrid],
#     ):
#         N, *_ = u.shape
#         if isinstance(nu, (int, float)):
#             nu = np.full((N,), nu, dtype=np.float64)
#         if isinstance(nu, np.ndarray) and len(nu.shape) == 1:
#             nu = sparse.diags(nu)  # type: ignore
#         d2x = _diff_grid(2, spatial_order, grid, 0)
#         dx = _diff_grid(1, spatial_order, grid, 0)
#         self.X = StateVector([u])
#         self.M = sparse.eye(N)
#         self.L = -nu @ d2x.matrix

#         def F(X: StateVector) -> NDArray[np.float64]:
#             return -cast(NDArray[np.float64], np.multiply(X.data, dx @ X.data))

#         self.F = F

#         def J(X: StateVector) -> Any:
#             return -(sparse.diags(X.data) @ dx.matrix + sparse.diags(dx @ X.data))

#         self.J = J


# class ReactionTwoSpeciesDiffusion(EquationSet):
#     def __init__(
#         self,
#         X: StateVector,
#         D: Union[float, NDArray[np.float64]],
#         r: Union[float, NDArray[np.float64]],
#         spatial_order: int,
#         grid: Union[
#             UniformPeriodicGrid, UniformNonPeriodicGrid, NonUniformPeriodicGrid
#         ],
#     ):
#         d2x = _diff_grid(2, spatial_order, grid, 0)

#         N, *_ = X.variables[0].shape
#         if isinstance(D, (int, float)):
#             D = np.full((N,), D, dtype=np.float64)
#         if isinstance(D, np.ndarray) and len(D.shape) == 1:
#             D = sparse.diags(np.concatenate((D, D)))  # type: ignore

#         if isinstance(r, (int, float)):
#             r = np.full((N,), r, dtype=np.float64)
#         if isinstance(r, np.ndarray) and len(r.shape) == 1:
#             r = sparse.diags(r)  # type: ignore

#         self.X = X
#         self.M = sparse.eye(2 * N)
#         self.L = -D @ sparse.bmat(
#             (
#                 (d2x.matrix, sparse.csr_matrix((N, N))),
#                 (sparse.csr_matrix((N, N)), d2x.matrix),
#             )
#         )

#         def F(X: StateVector) -> NDArray[np.float64]:
#             X.scatter()
#             c1, c2 = X.variables
#             return cast(
#                 NDArray[np.float64],
#                 np.concatenate(  # type: ignore
#                     (np.multiply(c1, 1 - c1 - c2), r @ np.multiply(c2, c1 - c2))
#                 ),
#             )

#         self.F = F

#         def J(X: StateVector) -> Any:
#             X.scatter()
#             c1, c2 = X.variables
#             return sparse.bmat(
#                 (
#                     (sparse.diags(1 - 2 * c1 - c2), sparse.diags(-c1)),
#                     (r @ sparse.diags(c2), r @ sparse.diags(c1 - 2 * c2)),
#                 )
#             )

#         self.J = J


# class DiffusionBC(EquationSet):
#     @cache
#     def _crank_nicolson(self, dt: float) -> Callable[[], None]:
#         c = self.X.variables[0]
#         M, _ = c.shape
#         Mmat = sparse.lil_array(sparse.eye(M + 2))
#         Mmat[0, -2] = 1
#         Mmat[-3, -1] = 1
#         Lmat = sparse.lil_array((M + 2, M + 2))
#         Lmat[:M, :M] = -self.D * sparse.csc_array(self.d2x.matrix)
#         LHS = (Mmat + dt / 2 * Lmat).tolil()
#         RHS = (Mmat - dt / 2 * Lmat).tolil()
#         LHS[M:, :] = 0
#         RHS[M:, :] = 0
#         LHS[-2, 0] = 1
#         LHS[-1, :M] = self.dx.matrix[-1, :]
#         LU = spla.splu(LHS.tocsc())
#         RHS = RHS[:, :-2].tocsc()
#         return lambda: np.copyto(c, LU.solve(RHS @ c)[:-2, :])  # type: ignore

#     def __init__(
#         self,
#         c: NDArray[np.float64],
#         D: float,
#         spatial_order: int,
#         domain: Domain,
#     ) -> None:

#         self.dx = _diff_grid(1, spatial_order, domain.grids[0], 0)
#         self.d2x = _diff_grid(2, spatial_order, domain.grids[0], 0)
#         d2y = _diff_grid(2, spatial_order, domain.grids[1], 1)

#         self.t = 0.0
#         self.iter = 0
#         M, N = c.shape
#         self.D = D

#         self.X = StateVector([c])
#         # M*(C1-C0)/dt + L*(C1+C0)/2 == 0
#         # M*(C1-C0)/dt == -L*(C1+C0)/2
#         # M*(C1-C0)/dt == -L*(C1+C0)/2+d
#         # M*(C1-C0) == -dt*L/2*(C1+C0)+dt*d
#         # (M+dt*L/2)*C1-dt*d = (M-dt*L/2)*C0

#         # self.M = sparse.eye(M)
#         # self.L = -D * sparse.csc_array(d2x.matrix)
#         # self.xstep = CrankNicolson(self, 0)

#         self.M = sparse.eye(N)
#         self.L = -D * sparse.csc_array(d2y.matrix)
#         self.ystep = CrankNicolson(self, 1)

#     def step(self, dt: float) -> None:
#         self.ystep.step(dt / 2)
#         self._crank_nicolson(dt)()
#         self.ystep.step(dt / 2)
#         self.t += dt
#         self.iter += 1


# class Wave2DBC(EquationSet):
#     def __init__(
#         self,
#         u: NDArray[np.float64],
#         v: NDArray[np.float64],
#         p: NDArray[np.float64],
#         spatial_order: int,
#         domain: Domain,
#     ) -> None:
#         dx = _diff_grid(1, spatial_order, domain.grids[0], 0)
#         dy = _diff_grid(1, spatial_order, domain.grids[1], 1)
#         self.X = StateVector([u, v, p])

#         def f(X: StateVector) -> NDArray[np.float64]:
#             X.scatter()
#             u, v, p = X.variables
#             du = dx @ p
#             dv = dy @ p
#             dp: NDArray[np.float64] = dx @ u + dy @ v
#             return -cast(
#                 NDArray[np.float64],
#                 np.concatenate((du, dv, dp), axis=0),  # type: ignore
#             )

#         self.F = f

#         def bc(X: StateVector) -> None:
#             X.scatter()
#             u, v, p = X.variables
#             u[0, :] = 0
#             u[-1, :] = 0
#             X.gather()

#         self.BC = bc
